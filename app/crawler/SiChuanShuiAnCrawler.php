<?php
/**
 * Created by PhpStorm.
 * User: wangyibo
 * Date: 2016-11-19
 * Time: 20:56
 */

namespace BuildInfo\crawler;

use RedisClient\RedisClient;
use RedisClient\ClientFactory;

class SiChuanShuiAnCrawler extends BaseCrawler
{
    public $postData = [];
    public $bodyQuery;
    protected $limit = 1;
    private static $mongoInstance;

    private $siChuanShuiAnCollection;
    public $useproxy = false;

    function __construct($urlRaw)
    {
        $this->redis = ClientFactory::create([
            'server' => 'tcp://127.0.0.1:6379', // or 'unix:///tmp/redis.sock'
            'timeout' => 2
        ]);
        $this->page = $this->redis->get(__CLASS__);
        if (empty($this->page)) {
            $this->redis->set(__CLASS__, 1);
            $this->page = $this->redis->get(__CLASS__);
        }
        $this->siChuanShuiAnCollection = $this->getDb()->build_info1->si_chuan_shui_an;
        parent::__construct($urlRaw);
    }

    function getContentAndSaveToBody($url)
    {
        $this->body = $this->doRequest($url, $this->postData);
//        print_r($this->postData);
        return $this->body;
    }

    function getDb($new = false)
    {
        if ($new) {
            return new \MongoDB\Client('mongodb://localhost:27017');
        }
        if (empty(self::$mongoInstance)) {
            self::$mongoInstance = new \MongoDB\Client('mongodb://localhost:27017');
        }
        return self::$mongoInstance;
    }

    function doRequest($url = '', $postData = [])
    {
        return parent::doRequest($url, $postData); // TODO: Change the autogenerated stub
    }

    public function getPostData()
    {
        $hidden = [];
        if (empty($this->bodyQuery)) {
            $hidden['__VIEWSTATE'] = '/wEPDwUJMzk2NDIxNTIxD2QWAgIDD2QWBgILDxBkDxYDAgECAgIDFgMQBQRB6K+BBQExZxAFBELor4EFATJnEAUEQ+ivgQUBM2dkZAINDxBkDxYRAgECAgIDAgQCBQIGAgcCCAIJAgoCCwIMAg0CDgIPAhACERYREAUHMjAwMOW5tAUEMjAwMGcQBQcyMDAx5bm0BQQyMDAxZxAFBzIwMDLlubQFBDIwMDJnEAUHMjAwM+W5tAUEMjAwM2cQBQcyMDA05bm0BQQyMDA0ZxAFBzIwMDXlubQFBDIwMDVnEAUHMjAwNuW5tAUEMjAwNmcQBQcyMDA35bm0BQQyMDA3ZxAFBzIwMDjlubQFBDIwMDhnEAUHMjAwOeW5tAUEMjAwOWcQBQcyMDEw5bm0BQQyMDEwZxAFBzIwMTHlubQFBDIwMTFnEAUHMjAxMuW5tAUEMjAxMmcQBQcyMDEz5bm0BQQyMDEzZxAFBzIwMTTlubQFBDIwMTRnEAUHMjAxNeW5tAUEMjAxNWcQBQcyMDE25bm0BQQyMDE2Z2RkAhUPPCsADQBkGAEFClNlYXJjaEdyaWQPZ2Q0yboOkknpS+cuKTx9DfZI/NA8Dg==';
            $hidden['__VIEWSTATEGENERATOR'] = 'CA0B0334';
        } else {
            $hidden['__VIEWSTATE'] = $this->bodyQuery->find('#__VIEWSTATE')->attr('value');
            $hidden['__VIEWSTATEGENERATOR'] = $this->bodyQuery->find('#__VIEWSTATEGENERATOR')->attr('value');
        }
        $hidden['__EVENTTARGET'] = 'SearchGrid';
        $hidden['__EVENTARGUMENT'] = 'Page$' . $this->page;
        $hidden['smode'] = 'false';
        $hidden['tb_unit'] = '%';
        return $hidden;
    }

    function explodeMajor($majorStr)
    {
        $majors = explode("、", $majorStr);
        foreach ($majors as &$major) {
            $major = trim($major);
        }
        return $majors;
    }

    function explainCert($name)
    {
        $cert = [];
        $name = trim($name);
        if (preg_match('/特级/', $name, $match)) {
            $level = 0;
            $name = str_replace($match[0], '', $name);
        } elseif (preg_match('/(一|壹)级/', $name, $match)) {
            $level = 1;
            $name = str_replace($match[0], '', $name);
        } elseif (preg_match('/(二|贰)级/', $name, $match)) {
            $level = 2;
            $name = str_replace($match[0], '', $name);
        } elseif (preg_match('/(三|叁)级/', $name, $match)) {
            $level = 3;
            $name = str_replace($match[0], '', $name);
        } elseif (preg_match('/不分等级/', $name, $match)) {
            $level = -1;
            $name = str_replace($match[0], '', $name);
        } else {
            $level = -2;
        }
        $cert['name'] = $name;
        $cert['level'] = $level;
        return $cert;
    }

    function hasNew()
    {
        // TODO:是否有新的内容
    }

    function savePage()
    {
        if (empty($this->postData)) {
            $this->postData = $this->getPostData();
        }
        $this->getContentAndSaveToBody($this->url);
        $this->bodyQuery = \QueryPath::withHTML5($this->body);
        $this->content = $this->bodyQuery->find('#SearchGrid');
        $trs = $this->content->find('tr');
        $results = [];
        $lines = 0;
        foreach ($trs as $tr) {
            $lines++;
            if ($lines == 1) {
                continue;
            }
            if ($lines == 16) {
                break;
            }
            $person = [];
            $tds = $tr->find('td');
            $person['name'] = trim($tds->eq(0)->text());
            $person['compName'] = trim($tds->eq(4)->text());
            $person['idCardNumber'] = trim($tds->eq(5)->text());
            $person['certNumber'] = trim($tds->eq(6)->text());
            $person['certState'] = trim($tds->eq(7)->text());
            $dateStr = trim($tds->eq(8)->text());
            $dateStr = preg_replace('/(年|月)/', '-', $dateStr);
            $dateStr = preg_replace('/日/', '', $dateStr);
            $person['endTime'] = strtotime($dateStr);
            if ($this->siChuanShuiAnCollection->findOne($person)) {
                echo "exist " . $person['idCardNumber'] . "\n";
                continue;
            }
            $res = $this->siChuanShuiAnCollection->insertOne($person);
            if ($res) {
                $results[] = true;
            }
        }
        echo "meet lines:" . $lines . "\n";
//        exit;
        if (!empty($results)) {
            return true;
        }
        return false;
    }

    function moveToNext()
    {

        $href = trim($this->bodyQuery->find('#SearchGrid_ctl17_cmdNext')->attr('href'));
        if (empty($href) || $href == "") {
            return false;
        }
        $this->page = $this->redis->incr(__CLASS__);
        $this->postData = $this->getPostData();
        return true;
    }

}