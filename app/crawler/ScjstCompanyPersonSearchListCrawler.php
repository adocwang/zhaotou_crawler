<?php
/**
 * Created by PhpStorm.
 * User: wangyibo
 * Date: 2016-11-19
 * Time: 20:56
 */

namespace BuildInfo\crawler;

use RedisClient\RedisClient;
use RedisClient\ClientFactory;

class ScjstCompanyPersonSearchListCrawler extends BaseCrawler
{
    public $postData = [];
    public $certNumbers = [];
    public $bodyQuery;
    protected $limit = 1;
    private static $mongoInstance;

    private $companyCollection;
    private $scjstPersonCollection;
    public $useproxy = true;

    function __construct($urlRaw)
    {
        $this->redis = ClientFactory::create([
            'server' => 'tcp://127.0.0.1:6379', // or 'unix:///tmp/redis.sock'
            'timeout' => 2
        ]);
        $this->page = $this->redis->get(__CLASS__);
        if (empty($this->page)) {
            $this->redis->set(__CLASS__, 0);
            $this->page = $this->redis->get(__CLASS__);
        }
        parent::__construct($urlRaw);
        $this->companyCollection = $this->mongoConnection->build_info1->company;
        $this->scjstPersonCollection = $this->mongoConnection->build_info1->scjst_person_san_lei_copy;
    }

    function getContentAndSaveToBody($url)
    {
        $this->body = $this->doRequest($url, $this->postData);
//        print_r($this->postData);
        return $this->body;
    }

    function doRequest($url = '', $postData = [])
    {
        return parent::doRequest($url, $postData); // TODO: Change the autogenerated stub
    }

    function saveCompany($compName)
    {
//        $compName = '四川尧顺建设集团有限公司';
        while (((int)date('h')) < 3 && ((int)date('h')) >= 1) {
            sleep(2);
            echo 'time counter:' . (date('h:i:s')) . "\n";
        }
        $this->postData = null;
        $this->certNumbers = [];
        $page = 1;
        $this->nextChildPage($compName, $page);
        do {
            $url = 'http://www.scjst.gov.cn:8081/QueryInfo/Person/PersonList.aspx';
            $this->tooManyNot200 = false;
            $this->getContentAndSaveToBody($url);
            if (empty($this->body) || $this->tooManyNot200) {
                return -1;
            }
            $bq = \QueryPath::withHTML5($this->body);
            if ($bq->find('input#txtCode')->length > 0) {//遇到验证码了
                echo "gotCheckCode!\n";
                sleep(5);
                $page--;
                continue;
            }
            $this->bodyQuery = $bq;
            $this->saveItem($compName);
            echo "finish child page:$page\n";
        } while ($this->nextChildPage($compName, ++$page));
//        exit;
    }

    function nextChildPage($compName, $page)
    {
        if ($page < 2) {
            return true;
        }
        $paginator = $this->bodyQuery->find('.paginator')->eq(0);
        $as = $paginator->find('a');
        foreach ($as as $a) {
            $text = trim($a->text());
            if (strcmp($text, '下页') === 0) {
                $href = trim($a->attr('href'));
                if (empty($href) || $href == "") {
                    return false;
                } else {
                    break;
                }
            }
        }

        $this->certNumbers = [];
        $persons = $this->scjstPersonCollection->find(['compName' => $compName, 'endTime' => ['$gt' => time()]]);
        foreach ($persons as $person) {
            if (empty(trim($person['name']))) {
                continue;
            }
            $this->certNumbers[] = "'" . addslashes(trim($person['name'])) . "'";
        }
//        print_r($this->certNumbers);exit;

        $hidden = [];
        $hidden['__VIEWSTATE'] = $this->bodyQuery->find('#__VIEWSTATE')->attr('value');
        $hidden['__EVENTTARGET'] = 'ctl00$mainContent$gvBiddingResultPager';
        $hidden['__EVENTARGUMENT'] = $page;
        $hidden['__EVENTVALIDATION'] = $this->bodyQuery->find('#__EVENTVALIDATION')->attr('value');
        $hidden['ctl00$mainContent$txt_rymc'] = '';
        $hidden['ctl00$mainContent$txt_entname'] = $compName;
        $hidden['ctl00$mainContent$txt_zch'] = '';
        $hidden['UBottom1:dg1'] = '';
        $hidden['UBottom1:dg2'] = '';
        $hidden['UBottom1:dg3'] = '';
        $hidden['UBottom1:dg4'] = '';
        $hidden['UBottom1:dg5'] = '';
        $hidden['UBottom1:dg6'] = '';
//        print_r($hidden);
//        exit;
        $this->postData = $hidden;
        return true;

    }

    public function saveItem($compName)
    {
        $this->content = $this->bodyQuery->find('table.list');
        $trs = $this->content->find('tr');
//        print_r($this->body);exit;
        $results = [];
        $lines = 0;
        if ($trs->length < 2) {
            echo "no person {$compName}\n";
            $this->scjstPersonCollection->insertOne(['no_person' => true, 'compName' => $compName]);
            return true;
        }
        foreach ($trs as $tr) {
            $lines++;
            if ($lines == 1) {
                continue;
            }
            $person = [];
            $person['compName'] = $compName;
            $url = $tr->find('td')->eq(1)->find('a')->attr('href');
            $URi = new \Purl\Url($url);
            $arr = $URi->query->getData();
            $person['siteId'] = trim($arr['id']);
            $person['name'] = trim($tr->find('td')->eq(1)->text());
//            $person['compName'] = trim($tr->find('td')->eq(3)->text());
            $person['certNumber'] = trim($tr->find('td')->eq(4)->text());
//            if (trim($person['certNumber']) != '') {
//                $this->certNumbers[] = "'" . addslashes($person['certNumber']) . "'";
//            }
            $person['certMajor'] = $this->explodeMajor(trim($tr->find('td')->eq(6)->text()));
            $person['endTime'] = strtotime(trim($tr->find('td')->eq(5)->text()));
            $certClass = trim($tr->find('td')->eq(7)->text());
            $certPair = $this->explainCert($certClass);
            $person['certName'] = $certPair['name'];
            $person['certLevel'] = $certPair['level'];
            if ($this->scjstPersonCollection->findOne(['compName' => $person['compName'], 'certNumber' => $person['certNumber']])) {
                echo "exist " . $person['certNumber'] . " {$compName}\n";
                continue;
            }
            $this->scjstPersonCollection->insertOne($person);
        }
        echo "meet lines:" . $lines . "\n";
//        exit;
        if (!empty($results)) {
            return true;
        }
        return false;
    }

    function explodeMajor($majorStr)
    {
        $majors = explode("、", $majorStr);
        foreach ($majors as &$major) {
            $major = trim($major);
        }
        return $majors;
    }

    function explainCert($name)
    {
        $cert = [];
        $name = trim($name);
        if (preg_match('/特级/', $name, $match)) {
            $level = 0;
            $name = str_replace($match[0], '', $name);
        } elseif (preg_match('/(一|壹)级/', $name, $match)) {
            $level = 1;
            $name = str_replace($match[0], '', $name);
        } elseif (preg_match('/(二|贰)级/', $name, $match)) {
            $level = 2;
            $name = str_replace($match[0], '', $name);
        } elseif (preg_match('/(三|叁)级/', $name, $match)) {
            $level = 3;
            $name = str_replace($match[0], '', $name);
        } elseif (preg_match('/不分等级/', $name, $match)) {
            $level = -1;
            $name = str_replace($match[0], '', $name);
        } else {
            $level = -2;
        }
        $cert['name'] = $name;
        $cert['level'] = $level;
        return $cert;
    }

    function hasNew()
    {
        // TODO:是否有新的内容
    }

    function requestNot200()
    {
        echo "too many not 200 catched!\n";
        $this->tooManyNot200 = true;
        return false;
    }

    function savePage()
    {
//        return $this->errorsCallback();//用于召回抓取出错的
        $companies = $this->companyCollection->find(['updateTime' => ['$gt' => 1482420000]], [
            'limit' => $this->limit,
            'sort' => ['_id' => 1],
            'skip' => $this->page * $this->limit
        ]);
        foreach ($companies as $company) {
            $res = $this->saveCompany($company['compName']);
            if ($res === -1) {
                $this->scjstPersonCollection->insertOne(['error' => 2, 'compName' => $company['compName']]);
                echo "clean postdata and restart this person\n";
            }
        }
        return true;
    }

    function errorsCallback()
    {
        $companies = $this->scjstPersonCollection->find(['error' => true], [
            'limit' => $this->limit,
            'sort' => ['_id' => 1],
            'skip' => $this->page * $this->limit
        ]);
        foreach ($companies as $company) {
            $res = $this->saveCompany($company['compName']);
            if ($res === -1) {
                $this->scjstPersonCollection->insertOne(['error' => 2, 'compName' => $company['compName']]);
                echo "clean postdata and restart this person\n";
            }
        }
        return true;
    }

    function moveToNext()
    {
        if ($this->companyCollection->count() <= $this->limit * $this->page) {
            return false;
        }
        $this->page = $this->redis->incr(__CLASS__);
        return true;
    }

}